// Notes on the classes:
//
// 1. .carousel.pointer-event should ideally be pan-y (to allow for users to scroll vertically)
//    even when their scroll action started on a carousel, but for compatibility (with Firefox)
//    we're preventing all actions instead
// 2. The .carousel-item-start and .carousel-item-end is used to indicate where
//    the active slide is heading.
// 3. .active.carousel-item is the current slide.
// 4. .active.carousel-item-start and .active.carousel-item-end is the current
//    slide in its in-transition state. Only one of these occurs at a time.
// 5. .carousel-item-next.carousel-item-start and .carousel-item-prev.carousel-item-end
//    is the upcoming slide in transition.

.carousel {
  position: relative;
}

.carousel.pointer-event {
  touch-action: pan-y;
}

.carousel-inner {
  position: relative;
  width: 100%;
  overflow: hidden;
  @include clearfix();
}

.carousel-item {
  position: relative;
  display: none;
  float: left;
  width: 100%;
  margin-right: -100%;
  backface-visibility: hidden;
  @include transition($carousel-transition);
}

.carousel-item.active,
.carousel-item-next,
.carousel-item-prev {
  display: block;
}

.carousel-item-next:not(.carousel-item-start),
.active.carousel-item-end {
  transform: translateX(100%);
}

.carousel-item-prev:not(.carousel-item-end),
.active.carousel-item-start {
  transform: translateX(-100%);
}

//
// Alternate transitions
//

.carousel-fade {
  .carousel-item {
    opacity: 0;
    transition-property: opacity;
    transform: none;
  }

  .carousel-item.active,
  .carousel-item-next.carousel-item-start,
  .carousel-item-prev.carousel-item-end {
    z-index: 1;
    opacity: 1;
  }

  .active.carousel-item-start,
  .active.carousel-item-end {
    z-index: 0;
    opacity: 0;
    @include transition(opacity 0s $carousel-transition-duration);
  }
}

//
// Left/right controls for nav
//

.carousel-control-prev,
.carousel-control-next {
  position: absolute;
  top: 0;
  bottom: 0;
  z-index: 1;
  // Use flex for alignment (1-3)
  display: flex; // 1. allow flex styles
  align-items: center; // 2. vertically center contents
  justify-content: center; // 3. horizontally center contents
  width: $carousel-control-width;
  padding: 0;
  color: $carousel-control-color;
  text-align: center;
  background: none;
  border: 0;
  opacity: $carousel-control-opacity;
  @include transition($carousel-control-transition);

  // Hover/focus state
  &:hover,
  &:focus {
    color: $carousel-control-color;
    text-decoration: none;
    outline: 0;
    opacity: $carousel-control-hover-opacity;
  }
}
.carousel-control-prev {
  left: 0;
  background-image: if(
    $enable-gradients,
    linear-gradient(90deg, rgba($black, 0.25), rgba($black, 0.001)),
    null
  );
}
.carousel-control-next {
  right: 0;
  background-image: if(
    $enable-gradients,
    linear-gradient(270deg, rgba($black, 0.25), rgba($black, 0.001)),
    null
  );
}

// Icons for within
.carousel-control-prev-icon,
.carousel-control-next-icon {
  display: inline-block;
  width: $carousel-control-icon-width;
  height: $carousel-control-icon-width;
  background-repeat: no-repeat;
  background-position: 50%;
  background-size: 100% 100%;
}

.carousel-control-prev-icon {
  background-image: escape-svg($carousel-control-prev-icon-bg) #{"/*rtl:" +
    escape-svg($carousel-control-next-icon-bg) + "*/"};
}
.carousel-control-next-icon {
  background-image: escape-svg($carousel-control-next-icon-bg) #{"/*rtl:" +
    escape-svg($carousel-control-prev-icon-bg) + "*/"};
}

// Optional indicator pips/controls
//
// Add a container (such as a list) with the following class and add an item (ideally a focusable control,
// like a button) with data-bs-target for each slide your carousel holds.

.carousel-indicators {
  position: absolute;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 2;
  display: flex;
  justify-content: center;
  padding: 0;
  // Use the .carousel-control's width as margin so we don't overlay those
  margin-right: $carousel-control-width;
  margin-bottom: 1rem;
  margin-left: $carousel-control-width;

  [data-bs-target] {
    box-sizing: content-box;
    flex: 0 1 auto;
    width: $carousel-indicator-width;
    height: $carousel-indicator-height;
    padding: 0;
    margin-right: $carousel-indicator-spacer;
    margin-left: $carousel-indicator-spacer;
    text-indent: -999px;
    cursor: pointer;
    background-color: $carousel-indicator-active-bg;
    background-clip: padding-box;
    border: 0;
    // Use transparent borders to increase the hit area by 10px on top and bottom.
    border-top: $carousel-indicator-hit-area-height solid transparent;
    border-bottom: $carousel-indicator-hit-area-height solid transparent;
    opacity: $carousel-indicator-opacity;
    @include transition($carousel-indicator-transition);
  }

  .active {
    opacity: $carousel-indicator-active-opacity;
  }
}

// Optional captions
//
//
$font-family-main: "Shred Handed", sans-serif;
$text-shadow-main: 3px 3px 2px rgba(255, 0, 0, 0.4),
  -6px 2px rgba(22, 22, 21, 0.88);

.carousel-caption {
  position: absolute;
  right: (100% - $carousel-caption-width) * 0.5;
  bottom: $carousel-caption-spacer;
  left: (100% - $carousel-caption-width) * 0.5;
  padding-top: $carousel-caption-padding-y;
  padding-bottom: $carousel-caption-padding-y;
  color: $carousel-caption-color;
  text-align: center;
    font-family: $font-family-main;
    text-shadow: $text-shadow-main;
}

// Dark mode carousel

@mixin carousel-dark() {
  .carousel-control-prev-icon,
  .carousel-control-next-icon {
    filter: $carousel-dark-control-icon-filter;
  }

  .carousel-indicators [data-bs-target] {
    background-color: $carousel-dark-indicator-active-bg;
  }

  .carousel-caption {
    color: $carousel-dark-caption-color;
  }
}

.carousel-dark {
  @include carousel-dark();
}

@if $enable-dark-mode {
  @include color-mode(dark) {
    @if $color-mode-type == "media-query" {
      .carousel {
        @include carousel-dark();
      }
    } @else {
      .carousel,
      &.carousel {
        @include carousel-dark();
      }
    }
  }
}

//Añadido para la tarea que tenga un caption que ocupe todo el ancho y no se mueva
.carousel-caption {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%; /* Ocupa todo el ancho */
  height: 100%; /* Ocupa toda la altura */
  background-color: $negrotransparente; /* Fondo semitransparente */
  display: flex; /* Flexbox para centrar contenido */
  flex-direction: column;
  justify-content: center; /* Centra verticalmente */
  align-items: center; /* Centra horizontalmente */
  color: $white; /* Texto blanco */
  text-align: center;
  padding: 1rem; /* Espaciado interno */
}

.carousel-caption h5 {
  font-size: 2rem;
}

.carousel-caption h3 {
  color: rgba(251, 255, 0, 0.88);
  font-size: clamp(4rem, 5vw, 7rem); /* Ajuste dinámico entre 2rem y 7rem */
}

.carousel-caption p {
  font-size: clamp(2.5rem, 3vw, 4rem);
  color: rgba(251, 255, 0, 0.88);
  font-weight: 100;
}

.carousel {
  position: relative;
}

.carousel-control-prev,
.carousel-control-next {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  width: auto;
  z-index: 5; /* Asegura que las flechas estén sobre el contenido */
}

.carousel-control-prev {
  left: 10px;
}

.carousel-control-next {
  right: 10px;
}

.carousel-inner {
  overflow: hidden;
}

#carouselPausePlay {
  background-color: rgba(255, 255, 255, 0.616); /* Fondo oscuro semi-transparente */
  color: rgb(0, 0, 0); /* Color del texto e iconos */
  border: 1px solid rgba(0, 0, 0, 0.5); /* Sin bordes */
  padding: 10px 15px; /* Espaciado interno */
  border-radius: 5px; /* Bordes redondeados */
  font-size: 2rem; /* Tamaño de fuente adecuado */
  cursor: pointer; /* Cambia el cursor al pasar por encima */
  z-index: 1050; /* Asegura que se muestre sobre el carrusel */
}
// font-size mas pequeño en moviles
@media (max-width: 768px) {
  #carouselPausePlay {
    font-size: 1rem;
  }
}

#carouselPausePlay:hover {
  background-color: rgba(255, 255, 255, 0.8); /* Fondo más claro al pasar el ratón */
  color: black; /* Texto e icono oscuros en hover */
}

